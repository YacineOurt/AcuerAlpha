{"ast":null,"code":"import { __awaiter as e, __generator as t, __assign as r, __rest as n } from \"../../../node_modules/tslib/tslib.es6.js\";\nimport { Auth as i } from \"aws-amplify\";\nimport s from \"lodash/get\";\nimport o from \"lodash/isEmpty\";\nimport { createMachine as a, sendUpdate as c } from \"xstate\";\nimport { AuthChallengeNames as d } from \"../../../types/authenticator/user.js\";\nimport \"../../../types/authenticator/attributes.js\";\nimport { runValidators as u } from \"../../../validators/index.js\";\nimport { clearAttributeToVerify as l, clearChallengeName as g, clearRequiredAttributes as f, clearError as m, clearFormValues as h, clearTouched as p, clearUnverifiedAttributes as v, clearValidationError as I, handleInput as A, handleSubmit as U, handleBlur as E, parsePhoneNumber as S, setChallengeName as b, setConfirmResetPasswordIntent as y, setConfirmSignUpIntent as T, setRequiredAttributes as C, setCredentials as N, setFieldErrors as w, setRemoteError as R, setUnverifiedAttributes as P, setUser as V, setUsernameAuthAttributes as F } from \"../actions.js\";\nimport { defaultServices as _ } from \"../defaultServices.js\";\n\nfunction k(k) {\n  var j = k.services;\n  return a({\n    initial: \"init\",\n    id: \"signInActor\",\n    states: {\n      init: {\n        always: [{\n          target: \"autoSignIn\",\n          cond: \"shouldAutoSignIn\"\n        }, {\n          target: \"signIn\"\n        }]\n      },\n      signIn: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              CHANGE: {\n                actions: \"handleInput\"\n              },\n              FEDERATED_SIGN_IN: \"federatedSignIn\"\n            }\n          },\n          federatedSignIn: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"clearError\"],\n            invoke: {\n              src: \"federatedSignIn\",\n              onError: {\n                actions: \"setRemoteError\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"parsePhoneNumber\", \"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"signIn\",\n              onDone: [{\n                cond: \"shouldSetupTOTP\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.setupTOTP\"\n              }, {\n                cond: \"shouldConfirmSignIn\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.confirmSignIn\"\n              }, {\n                cond: \"shouldForceChangePassword\",\n                actions: [\"setUser\", \"setChallengeName\", \"setRequiredAttributes\"],\n                target: \"#signInActor.forceNewPassword\"\n              }, {\n                actions: \"setUser\",\n                target: \"verifying\"\n              }],\n              onError: [{\n                cond: \"shouldRedirectToConfirmSignUp\",\n                actions: [\"setCredentials\", \"setConfirmSignUpIntent\"],\n                target: \"rejected\"\n              }, {\n                cond: \"shouldRedirectToConfirmResetPassword\",\n                actions: [\"setUsernameAuthAttributes\", \"setConfirmResetPasswordIntent\"],\n                target: \"rejected\"\n              }, {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }]\n            }\n          },\n          verifying: {\n            tags: [\"pending\"],\n            entry: [\"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"checkVerifiedContact\",\n              onDone: [{\n                cond: \"shouldRequestVerification\",\n                target: \"#signInActor.verifyUser\",\n                actions: \"setUnverifiedAttributes\"\n              }, {\n                target: \"resolved\"\n              }],\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          },\n          resolved: {\n            always: \"#signInActor.resolved\"\n          },\n          rejected: {\n            always: \"#signInActor.rejected\"\n          }\n        }\n      },\n      autoSignIn: {\n        initial: \"submit\",\n        states: {\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"signIn\",\n              onDone: [{\n                cond: \"shouldSetupTOTP\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.setupTOTP\"\n              }, {\n                cond: \"shouldConfirmSignIn\",\n                actions: [\"setUser\", \"setChallengeName\"],\n                target: \"#signInActor.confirmSignIn\"\n              }, {\n                cond: \"shouldForceChangePassword\",\n                actions: [\"setUser\", \"setChallengeName\", \"setRequiredAttributes\"],\n                target: \"#signInActor.forceNewPassword\"\n              }, {\n                actions: \"setUser\",\n                target: \"#signInActor.resolved\"\n              }],\n              onError: [{\n                cond: \"shouldRedirectToConfirmSignUp\",\n                actions: [\"setCredentials\", \"setConfirmSignUpIntent\"],\n                target: \"#signInActor.rejected\"\n              }, {\n                cond: \"shouldRedirectToConfirmResetPassword\",\n                actions: [\"setUsernameAuthAttributes\", \"setConfirmResetPasswordIntent\"],\n                target: \"#signInActor.rejected\"\n              }, {\n                actions: \"setRemoteError\",\n                target: \"#signInActor.signIn\"\n              }]\n            }\n          }\n        }\n      },\n      confirmSignIn: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SIGN_IN: \"#signInActor.signIn\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"clearError\", \"sendUpdate\"],\n            invoke: {\n              src: \"confirmSignIn\",\n              onDone: {\n                target: \"#signInActor.resolved\",\n                actions: [\"setUser\", \"clearChallengeName\", \"clearRequiredAttributes\"]\n              },\n              onError: {\n                target: \"edit\",\n                actions: \"setRemoteError\"\n              }\n            }\n          }\n        }\n      },\n      forceNewPassword: {\n        type: \"parallel\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          validation: {\n            initial: \"pending\",\n            states: {\n              pending: {\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"valid\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"invalid\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              valid: {\n                entry: \"sendUpdate\"\n              },\n              invalid: {\n                entry: \"sendUpdate\"\n              }\n            },\n            on: {\n              SIGN_IN: \"#signInActor.signIn\",\n              CHANGE: {\n                actions: \"handleInput\",\n                target: \".pending\"\n              },\n              BLUR: {\n                actions: \"handleBlur\",\n                target: \".pending\"\n              }\n            }\n          },\n          submit: {\n            initial: \"idle\",\n            entry: \"clearError\",\n            states: {\n              idle: {\n                entry: \"sendUpdate\",\n                on: {\n                  SUBMIT: {\n                    actions: \"handleSubmit\",\n                    target: \"validate\"\n                  }\n                }\n              },\n              validate: {\n                entry: \"sendUpdate\",\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"pending\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              pending: {\n                tags: [\"pending\"],\n                entry: [\"sendUpdate\", \"clearError\"],\n                invoke: {\n                  src: \"forceNewPassword\",\n                  onDone: [{\n                    cond: \"shouldConfirmSignIn\",\n                    actions: [\"setUser\", \"setChallengeName\"],\n                    target: \"#signInActor.confirmSignIn\"\n                  }, {\n                    cond: \"shouldSetupTOTP\",\n                    actions: [\"setUser\", \"setChallengeName\"],\n                    target: \"#signInActor.setupTOTP\"\n                  }, {\n                    target: \"resolved\",\n                    actions: [\"setUser\", \"setCredentials\"]\n                  }],\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setRemoteError\"\n                  }\n                }\n              },\n              resolved: {\n                type: \"final\",\n                always: \"#signInActor.resolved\"\n              }\n            }\n          }\n        }\n      },\n      setupTOTP: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SIGN_IN: \"#signInActor.signIn\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"clearError\"],\n            invoke: {\n              src: \"verifyTotpToken\",\n              onDone: {\n                actions: [\"clearChallengeName\", \"clearRequiredAttributes\"],\n                target: \"#signInActor.resolved\"\n              },\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      verifyUser: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SKIP: \"#signInActor.resolved\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: \"clearError\",\n            invoke: {\n              src: \"verifyUser\",\n              onDone: {\n                target: \"#signInActor.confirmVerifyUser\"\n              },\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      confirmVerifyUser: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearUnverifiedAttributes\", \"clearAttributeToVerify\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              SKIP: \"#signInActor.resolved\",\n              CHANGE: {\n                actions: \"handleInput\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: \"clearError\",\n            invoke: {\n              src: \"confirmVerifyUser\",\n              onDone: {\n                target: \"#signInActor.resolved\"\n              },\n              onError: {\n                actions: \"setRemoteError\",\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: \"final\",\n        data: function data(e) {\n          return {\n            user: e.user\n          };\n        }\n      },\n      rejected: {\n        type: \"final\",\n        data: function data(e, t) {\n          return {\n            intent: e.redirectIntent,\n            authAttributes: e.authAttributes\n          };\n        }\n      }\n    }\n  }, {\n    actions: {\n      clearAttributeToVerify: l,\n      clearChallengeName: g,\n      clearRequiredAttributes: f,\n      clearError: m,\n      clearFormValues: h,\n      clearTouched: p,\n      clearUnverifiedAttributes: v,\n      clearValidationError: I,\n      handleInput: A,\n      handleSubmit: U,\n      handleBlur: E,\n      parsePhoneNumber: S,\n      setChallengeName: b,\n      setConfirmResetPasswordIntent: y,\n      setConfirmSignUpIntent: T,\n      setRequiredAttributes: C,\n      setCredentials: N,\n      setFieldErrors: w,\n      setRemoteError: R,\n      setUnverifiedAttributes: P,\n      setUser: V,\n      setUsernameAuthAttributes: F,\n      sendUpdate: c()\n    },\n    guards: {\n      shouldConfirmSignIn: function shouldConfirmSignIn(e, t) {\n        var r = s(t, \"data.challengeName\");\n        return [d.SMS_MFA, d.SOFTWARE_TOKEN_MFA].includes(r);\n      },\n      shouldAutoSignIn: function shouldAutoSignIn(e) {\n        return \"autoSignIn\" === (null == e ? void 0 : e.intent);\n      },\n      shouldRedirectToConfirmSignUp: function shouldRedirectToConfirmSignUp(e, t) {\n        return \"UserNotConfirmedException\" === t.data.code;\n      },\n      shouldRedirectToConfirmResetPassword: function shouldRedirectToConfirmResetPassword(e, t) {\n        return \"PasswordResetRequiredException\" === t.data.code;\n      },\n      shouldSetupTOTP: function shouldSetupTOTP(e, t) {\n        return s(t, \"data.challengeName\") === d.MFA_SETUP;\n      },\n      shouldForceChangePassword: function shouldForceChangePassword(e, t) {\n        return s(t, \"data.challengeName\") === d.NEW_PASSWORD_REQUIRED;\n      },\n      shouldRequestVerification: function shouldRequestVerification(e, t) {\n        var r = t.data,\n            n = r.unverified,\n            i = r.verified;\n        return o(i) && !o(n);\n      }\n    },\n    services: {\n      signIn: function signIn(n) {\n        return e(this, void 0, void 0, function () {\n          var e, i, s, o, a, c, d;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = n.authAttributes, i = void 0 === e ? {} : e, s = n.formValues, o = void 0 === s ? {} : s, a = r(r({}, i), o), c = a.username, d = a.password, [4, j.handleSignIn({\n                  username: c,\n                  password: d\n                })];\n\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      confirmSignIn: function confirmSignIn(r, n) {\n        return e(this, void 0, void 0, function () {\n          var e, n, s, o;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.challengeName, n = r.user, s = r.formValues.confirmation_code, e !== d.SMS_MFA && e !== d.SOFTWARE_TOKEN_MFA || (o = e), [4, j.handleConfirmSignIn({\n                  user: n,\n                  code: s,\n                  mfaType: o\n                })];\n\n              case 1:\n                return t.sent(), [4, i.currentAuthenticatedUser()];\n\n              case 2:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      forceNewPassword: function forceNewPassword(s, o) {\n        return e(this, void 0, void 0, function () {\n          var e, o, a, c, d, u, l, g, f;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                e = s.user, o = s.formValues, a = o.password, c = o.phone_number, d = o.country_code, u = n(o, [\"password\", \"confirm_password\", \"phone_number\", \"country_code\"]), c && (l = \"\".concat(d).concat(c).replace(/[^A-Z0-9+]/gi, \"\"), u = r(r({}, u), {\n                  phone_number: l\n                })), t.label = 1;\n\n              case 1:\n                return t.trys.push([1, 3,, 4]), [4, i.completeNewPassword(e, a, u)];\n\n              case 2:\n                return (g = t.sent()).challengeName ? [2, g] : [2, i.currentAuthenticatedUser()];\n\n              case 3:\n                return f = t.sent(), [2, Promise.reject(f)];\n\n              case 4:\n                return [2];\n            }\n          });\n        });\n      },\n      verifyTotpToken: function verifyTotpToken(r, n) {\n        return e(this, void 0, void 0, function () {\n          var e, n;\n          return t(this, function (t) {\n            return e = r.user, n = r.formValues.confirmation_code, [2, i.verifyTotpToken(e, n)];\n          });\n        });\n      },\n      federatedSignIn: function federatedSignIn(r, n) {\n        return e(this, void 0, void 0, function () {\n          var e;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = n.data.provider, [4, i.federatedSignIn({\n                  provider: e\n                })];\n\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      checkVerifiedContact: function checkVerifiedContact(r, n) {\n        return e(this, void 0, void 0, function () {\n          var e;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.user, [4, i.verifiedContact(e)];\n\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      verifyUser: function verifyUser(r, n) {\n        return e(this, void 0, void 0, function () {\n          var e, n;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.formValues.unverifiedAttr, [4, i.verifyCurrentUserAttribute(e)];\n\n              case 1:\n                return n = t.sent(), r.attributeToVerify = e, [2, n];\n            }\n          });\n        });\n      },\n      confirmVerifyUser: function confirmVerifyUser(r, n) {\n        return e(this, void 0, void 0, function () {\n          var e, n;\n          return t(this, function (t) {\n            switch (t.label) {\n              case 0:\n                return e = r.attributeToVerify, n = r.formValues.confirmation_code, [4, i.verifyCurrentUserAttributeSubmit(e, n)];\n\n              case 1:\n                return [2, t.sent()];\n            }\n          });\n        });\n      },\n      validateFields: function validateFields(r, n) {\n        return e(this, void 0, void 0, function () {\n          return t(this, function (e) {\n            return [2, u(r.formValues, r.touched, r.passwordSettings, [_.validateConfirmPassword])];\n          });\n        });\n      }\n    }\n  });\n}\n\nexport { k as signInActor };","map":null,"metadata":{},"sourceType":"module"}