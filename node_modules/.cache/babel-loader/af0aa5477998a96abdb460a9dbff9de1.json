{"ast":null,"code":"export var MAX_DELAY_MS = 5000;\nexport var NON_RETRYABLE_CODES = [400, 401, 403];\nexport var MESSAGE_TYPES;\n\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\n\nexport var SUBSCRIPTION_STATUS;\n\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\n\nexport var SOCKET_STATUS;\n\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\n\nexport var AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nexport var AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\n\nexport var CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\n\nexport var START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\n\nexport var DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n/**\n * Default Time in milleseconds to alert for missed GQL_CONNECTION_KEEP_ALIVE message\n */\n\nexport var DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT = 65 * 1000;","map":null,"metadata":{},"sourceType":"module"}