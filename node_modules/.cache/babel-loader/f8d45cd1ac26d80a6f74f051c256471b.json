{"ast":null,"code":"import { __rest as i } from \"../../node_modules/tslib/tslib.es6.js\";\nimport { jsx as a, jsxs as e } from \"react/jsx-runtime\";\nimport * as t from \"react\";\nimport s from \"classnames\";\nimport { Button as n } from \"../Button/Button.js\";\nimport { Flex as r } from \"../Flex/Flex.js\";\nimport { ComponentClassNames as l, ComponentText as o } from \"../shared/constants.js\";\nimport { View as c } from \"../View/View.js\";\nimport { IconChevronLeft as m } from \"../Icon/icons/IconChevronLeft.js\";\nimport { IconChevronRight as u } from \"../Icon/icons/IconChevronRight.js\";\nimport { VisuallyHidden as g } from \"../VisuallyHidden/VisuallyHidden.js\";\nimport { classNameModifier as b, classNameModifierByFlag as d } from \"../shared/utils.js\";\n\nvar p = \"current\",\n    j = \"ellipsis\",\n    I = function I(p) {\n  var j = p.type,\n      I = p.page,\n      P = p.currentPage,\n      _p$currentPageLabel = p.currentPageLabel,\n      h = _p$currentPageLabel === void 0 ? o.PaginationItem.currentPageLabel : _p$currentPageLabel,\n      k = p.isDisabled,\n      f = p.onClick,\n      C = p.ariaLabel,\n      B = i(p, [\"type\", \"page\", \"currentPage\", \"currentPageLabel\", \"isDisabled\", \"onClick\", \"ariaLabel\"]);\n  var L = t.useCallback(function () {\n    f(I, P);\n  }, [I, P, f]),\n      O = t.useCallback(function () {\n    f();\n  }, [f]),\n      v = t.useCallback(function () {\n    f();\n  }, [f]),\n      N = s(l.PaginationItemButton, b(l.PaginationItemButton, \"link\"), d(l.PaginationItemButton, \"disabled\", k)),\n      x = s(l.PaginationItemButton, b(l.PaginationItemButton, \"link\"), d(l.PaginationItemButton, \"disabled\", k));\n\n  switch (j) {\n    case \"page\":\n      return a(c, Object.assign({\n        as: \"li\"\n      }, {\n        children: I === P ? e(r, Object.assign({\n          \"aria-current\": \"page\",\n          as: \"button\",\n          className: l.PaginationItemCurrent,\n          testId: \"current\"\n        }, B, {\n          children: [e(g, {\n            children: [h, \":\"]\n          }), I]\n        })) : a(n, Object.assign({\n          className: s(l.PaginationItemButton, b(l.PaginationItemButton, \"link\")),\n          size: \"small\",\n          variation: \"link\",\n          onClick: L,\n          ariaLabel: C\n        }, B, {\n          children: I\n        }))\n      }));\n\n    case \"next\":\n      return a(c, Object.assign({\n        as: \"li\"\n      }, {\n        children: a(n, Object.assign({\n          className: N,\n          size: \"small\",\n          variation: \"link\",\n          isDisabled: k,\n          onClick: v,\n          ariaLabel: C\n        }, B, {\n          children: a(u, {\n            size: \"large\"\n          })\n        }))\n      }));\n\n    case \"previous\":\n      return a(c, Object.assign({\n        as: \"li\"\n      }, {\n        children: a(n, Object.assign({\n          className: x,\n          size: \"small\",\n          variation: \"link\",\n          isDisabled: k,\n          onClick: O,\n          ariaLabel: C\n        }, B, {\n          children: a(m, {\n            size: \"large\"\n          })\n        }))\n      }));\n\n    case \"ellipsis\":\n      return a(c, Object.assign({\n        as: \"li\"\n      }, {\n        children: a(r, Object.assign({\n          as: \"span\",\n          className: l.PaginationItemEllipsis,\n          testId: \"ellipsis\"\n        }, B, {\n          children: \"â€¦\"\n        }))\n      }));\n  }\n\n  return a(c, {\n    as: \"li\"\n  });\n};\n\nI.displayName = \"PaginationItem\";\nexport { p as PAGINATION_CURRENT_TEST_ID, j as PAGINATION_ELLIPSIS_TEST_ID, I as PaginationItem };","map":null,"metadata":{},"sourceType":"module"}