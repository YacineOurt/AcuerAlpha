{"ast":null,"code":"import React from 'react';\nimport deepEqual from 'dequal';\n\nfunction checkDeps(deps, name) {\n  var reactHookName = \"React.\".concat(name.replace(/DeepCompare/, \"\"));\n\n  if (!deps || deps.length === 0) {\n    throw new Error(\"\".concat(name, \" should not be used with no dependencies. Use \").concat(reactHookName, \" instead.\"));\n  }\n}\n\nfunction useDeepCompareMemoize(value) {\n  var ref = React.useRef([]);\n\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n/**\n * `useDeepCompareEffect` will return a memoized version of the callback that\n * only changes if one of the `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\n\nfunction useDeepCompareCallback(callback, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareCallback');\n  }\n\n  return React.useCallback(callback, useDeepCompareMemoize(dependencies));\n}\n/**\n * `useDeepCompareEffect` Accepts a function that contains imperative, possibly\n * effectful code.\n *\n * @param effect Imperative function that can return a cleanup function\n * @param deps If present, effect will only activate if the values in the list\n * change.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useEffect.\n *\n */\n\n\nfunction useDeepCompareEffect(effect, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareEffect');\n  }\n\n  React.useEffect(effect, useDeepCompareMemoize(dependencies));\n}\n/**\n * `useDeepCompareMemo` will only recompute the memoized value when one of the\n * `deps` has changed.\n *\n * Usage note: only use this if `deps` are objects or arrays that contain\n * objects. Otherwise you should just use React.useMemo.\n *\n */\n\n\nfunction useDeepCompareMemo(factory, dependencies) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkDeps(dependencies, 'useDeepCompareMemo');\n  }\n\n  return React.useMemo(factory, useDeepCompareMemoize(dependencies));\n}\n\nexport { useDeepCompareCallback, useDeepCompareEffect, useDeepCompareMemo };","map":null,"metadata":{},"sourceType":"module"}