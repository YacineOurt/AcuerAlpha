{"ast":null,"code":"import { __assign as e } from \"../../node_modules/tslib/tslib.es6.js\";\nimport { assign as r, stop as n } from \"xstate/lib/actions\";\n\nvar t = function t(e) {\n  return n(e);\n},\n    o = r({\n  attributeToVerify: function attributeToVerify(e) {}\n}),\n    u = r({\n  challengeName: function challengeName(e) {}\n}),\n    a = r({\n  requiredAttributes: function requiredAttributes(e) {}\n}),\n    i = r({\n  remoteError: function remoteError(e) {\n    return \"\";\n  }\n}),\n    c = r({\n  formValues: function formValues(e) {\n    return {};\n  }\n}),\n    s = r({\n  touched: function touched(e) {\n    return {};\n  }\n}),\n    l = r({\n  unverifiedAttributes: function unverifiedAttributes(e) {}\n}),\n    d = r({\n  username: function username(e) {}\n}),\n    f = r({\n  validationError: function validationError(e) {\n    return {};\n  }\n}),\n    m = r({\n  challengeName: function challengeName(e, r) {\n    var n;\n    return null === (n = r.data) || void 0 === n ? void 0 : n.challengeName;\n  }\n}),\n    v = r({\n  requiredAttributes: function requiredAttributes(e, r) {\n    var n, t;\n    return null === (t = null === (n = r.data) || void 0 === n ? void 0 : n.challengeParam) || void 0 === t ? void 0 : t.requiredAttributes;\n  }\n}),\n    h = r({\n  redirectIntent: function redirectIntent(e) {\n    return \"confirmPasswordReset\";\n  }\n}),\n    b = r({\n  redirectIntent: function redirectIntent(e) {\n    return \"confirmSignUp\";\n  }\n}),\n    V = r({\n  authAttributes: function authAttributes(e, r) {\n    var n,\n        t,\n        o = e.loginMechanisms[0];\n    return {\n      username: null !== (n = e.formValues[o]) && void 0 !== n ? n : e.formValues.username,\n      password: null === (t = e.formValues) || void 0 === t ? void 0 : t.password\n    };\n  }\n}),\n    p = r({\n  validationError: function validationError(e, r) {\n    return r.data;\n  }\n}),\n    g = r({\n  remoteError: function remoteError(e, r) {\n    var n;\n    return \"NoUserPoolError\" === r.data.name ? \"Configuration error (see console) â€“ please contact the administrator\" : (null === (n = r.data) || void 0 === n ? void 0 : n.message) || r.data;\n  }\n}),\n    _ = r({\n  unverifiedAttributes: function unverifiedAttributes(e, r) {\n    return r.data.unverified;\n  }\n}),\n    A = r({\n  user: function user(e, r) {\n    return r.data.user || r.data;\n  }\n}),\n    y = r({\n  username: function username(e, r) {\n    var n = e.formValues,\n        t = n.username,\n        o = n.country_code;\n    return o && (t = \"\".concat(o).concat(t)), t;\n  }\n}),\n    E = r({\n  codeDeliveryDetails: function codeDeliveryDetails(e, r) {\n    return r.data.codeDeliveryDetails;\n  }\n}),\n    D = r({\n  authAttributes: function authAttributes(e, r) {\n    return {\n      username: e.formValues.username\n    };\n  }\n}),\n    N = r({\n  formValues: function formValues(r, n) {\n    var t,\n        o = n.data,\n        u = o.name,\n        a = o.value;\n    return e(e({}, r.formValues), ((t = {})[u] = a, t));\n  }\n}),\n    q = r({\n  formValues: function formValues(r, n) {\n    return e(e({}, r.formValues), n.data);\n  }\n}),\n    w = r({\n  touched: function touched(r, n) {\n    var t,\n        o = n.data.name;\n    return e(e({}, r.touched), ((t = {})[\"\".concat(o)] = !0, t));\n  }\n}),\n    P = r({\n  formValues: function formValues(r, n) {\n    var t,\n        o,\n        u = r.loginMechanisms[0],\n        a = void 0 === u ? \"username\" : u;\n    if (!r.formValues.phone_number && \"phone_number\" !== a) return r.formValues;\n    var i = r.formValues,\n        c = r.country_code,\n        s = i.phone_number ? \"phone_number\" : \"username\",\n        l = \"\".concat(null !== (o = i.country_code) && void 0 !== o ? o : c).concat(i[s]).replace(/[^A-Z0-9+]/gi, \"\"),\n        d = e(e({}, i), ((t = {})[s] = l, t));\n    return delete d.country_code, d;\n  }\n});\n\nexport { o as clearAttributeToVerify, u as clearChallengeName, i as clearError, c as clearFormValues, a as clearRequiredAttributes, s as clearTouched, l as clearUnverifiedAttributes, d as clearUsername, f as clearValidationError, w as handleBlur, N as handleInput, q as handleSubmit, P as parsePhoneNumber, m as setChallengeName, E as setCodeDeliveryDetails, h as setConfirmResetPasswordIntent, b as setConfirmSignUpIntent, V as setCredentials, p as setFieldErrors, g as setRemoteError, v as setRequiredAttributes, _ as setUnverifiedAttributes, A as setUser, y as setUsername, D as setUsernameAuthAttributes, t as stopActor };","map":null,"metadata":{},"sourceType":"module"}