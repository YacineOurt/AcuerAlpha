{"ast":null,"code":"import { jsx as e } from \"react/jsx-runtime\";\nimport * as t from \"react\";\nimport { getSendEventAliases as r, createAuthenticatorMachine as s, listenToAuthHub as o, getServiceContextFacade as n } from \"@aws-amplify/ui\";\nimport { useSelector as i, useInterpret as c } from \"@xstate/react\";\nimport a from \"lodash/isEmpty\";\nimport { areArrayValuesEqual as u } from \"../../../../helpers/utils.js\";\n\nvar m = t.createContext({}),\n    p = function p(_ref) {\n  var r = _ref.children;\n  var n = t.useContext(m),\n      i = c(s),\n      u = t.useMemo(function () {\n    return a(n) ? {\n      service: i\n    } : n;\n  }, [n, i]),\n      p = u.service;\n  return t.useEffect(function () {\n    return o(p);\n  }, [p]), e(m.Provider, Object.assign({\n    value: u\n  }, {\n    children: r\n  }));\n},\n    f = function f(e) {\n  var s = function () {\n    var _t$useContext = t.useContext(m),\n        e = _t$useContext.service;\n\n    if (!e) throw new Error(\"Please ensure you wrap your App with `Authenticator.Provider`.\\nSee the `useAuthenticator` section on https://ui.docs.amplify.aws/connected-components/authenticator.\");\n    return e;\n  }(),\n      o = s.send,\n      c = t.useMemo(function () {\n    return r(o);\n  }, [o]),\n      a = i(s, function (e) {\n    return function (e) {\n      return Object.assign(Object.assign({}, c), n(e));\n    }(e);\n  }, function (t, r) {\n    if (!e) return !1;\n    var s = e(t),\n        o = e(r);\n    return u(s, o);\n  });\n\n  return Object.assign(Object.assign({}, a), {\n    _state: s.getSnapshot(),\n    _send: o\n  });\n};\n\nexport { m as AuthenticatorContext, p as Provider, f as useAuthenticator };","map":null,"metadata":{},"sourceType":"module"}