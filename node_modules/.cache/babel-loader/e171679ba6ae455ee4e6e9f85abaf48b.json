{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\nexport var awsAuthMiddleware = function awsAuthMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, output, _a, _b, dateHeader;\n\n        var _c;\n\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2, next(args)];\n              return [4, options.signer()];\n\n            case 1:\n              signer = _d.sent();\n              _a = next;\n              _b = [__assign({}, args)];\n              _c = {};\n              return [4, signer.sign(args.request, {\n                signingDate: getSkewCorrectedDate(options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n\n            case 2:\n              return [4, _a.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.request = _d.sent(), _c)]))]).catch(function (error) {\n                var _a;\n\n                var serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);\n\n                if (serverTime) {\n                  options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);\n                }\n\n                throw error;\n              })];\n\n            case 3:\n              output = _d.sent();\n              dateHeader = getDateHeader(output.response);\n\n              if (dateHeader) {\n                options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n              }\n\n              return [2, output];\n          }\n        });\n      });\n    };\n  };\n};\n\nvar getDateHeader = function getDateHeader(response) {\n  var _a, _b, _c;\n\n  return HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : undefined;\n};\n\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function getAwsAuthPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};\nexport var getSigV4AuthPlugin = getAwsAuthPlugin;","map":null,"metadata":{},"sourceType":"module"}