{"ast":null,"code":"import _slicedToArray from \"/home/yacine/Pro/alpha/AcuerApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __rest as s } from \"../../node_modules/tslib/tslib.es6.js\";\nimport { jsxs as i, jsx as e } from \"react/jsx-runtime\";\nimport * as r from \"react\";\nimport a from \"classnames\";\nimport { ComponentClassNames as t, ComponentText as o } from \"../shared/constants.js\";\nimport { isFunction as n, classNameModifier as l } from \"../shared/utils.js\";\nimport { View as m } from \"../View/View.js\";\nimport { Flex as c } from \"../Flex/Flex.js\";\nimport { Button as d } from \"../Button/Button.js\";\nimport { AlertIcon as f } from \"./AlertIcon.js\";\nimport { IconClose as b } from \"../Icon/icons/IconClose.js\";\nvar h = r.forwardRef(function (h, j) {\n  var u = h.buttonRef,\n      p = h.children,\n      g = h.className,\n      _h$dismissButtonLabel = h.dismissButtonLabel,\n      A = _h$dismissButtonLabel === void 0 ? o.Alert.dismissButtonLabel : _h$dismissButtonLabel,\n      _h$hasIcon = h.hasIcon,\n      N = _h$hasIcon === void 0 ? !0 : _h$hasIcon,\n      v = h.heading,\n      _h$isDismissible = h.isDismissible,\n      B = _h$isDismissible === void 0 ? !1 : _h$isDismissible,\n      x = h.onDismiss,\n      D = h.variation,\n      I = s(h, [\"buttonRef\", \"children\", \"className\", \"dismissButtonLabel\", \"hasIcon\", \"heading\", \"isDismissible\", \"onDismiss\", \"variation\"]);\n\n  var _r$useState = r.useState(!1),\n      _r$useState2 = _slicedToArray(_r$useState, 2),\n      O = _r$useState2[0],\n      L = _r$useState2[1],\n      k = r.useCallback(function () {\n    L(!O), n(x) && x();\n  }, [L, x, O]);\n\n  return !O && i(c, Object.assign({\n    className: a(t.Alert, g, l(t.Alert, D)),\n    \"data-variation\": D,\n    ref: j,\n    role: \"alert\"\n  }, I, {\n    children: [N && e(f, {\n      variation: D,\n      ariaHidden: !0\n    }), i(m, Object.assign({\n      flex: \"1\"\n    }, {\n      children: [v && e(m, Object.assign({\n        className: t.AlertHeading\n      }, {\n        children: v\n      })), e(m, Object.assign({\n        className: t.AlertBody\n      }, {\n        children: p\n      }))]\n    })), B && e(d, Object.assign({\n      ariaLabel: A,\n      variation: \"link\",\n      className: t.AlertDismiss,\n      onClick: k,\n      ref: u\n    }, {\n      children: e(b, {\n        \"aria-hidden\": \"true\"\n      })\n    }))]\n  }));\n});\nh.displayName = \"Alert\";\nexport { h as Alert };","map":null,"metadata":{},"sourceType":"module"}