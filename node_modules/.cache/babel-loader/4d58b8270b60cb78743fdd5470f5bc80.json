{"ast":null,"code":"function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { debounce } from \"debounce\";\nimport { createElement, removeElement } from \"../utils\";\nimport { createErrorIcon } from \"./icons\";\nimport { createEditIcon, createPopupStep1Icon, createPopupStep2Icon, createPopupStep3Icon, createPopupStep4Icon, createTrashIcon, createDeleteSuccessIcon, createCloseIcon } from \"./icons\";\nexport function AmplifyGeofenceControlUI(geofenceControl, geofenceControlContainer) {\n  var _addGeofenceContainer;\n\n  var _deleteGeofenceContainer;\n\n  var _addGeofencebutton;\n\n  var _checkboxAll;\n\n  var _geofenceList;\n\n  var _createContainer;\n\n  var _geofenceTitle;\n\n  var _checkBoxAllAndCreateContainer;\n\n  var _checkBoxAllContainer;\n\n  var _circleModeContainer;\n\n  var _polygonModeContainer;\n\n  var _deletePopdownContainer;\n\n  var _errorDiv;\n\n  var _geofenceCreateRadiusInput;\n\n  function registerControlPosition(map, positionName) {\n    if (map._controlPositions[positionName]) {\n      return;\n    }\n\n    var positionContainer = document.createElement(\"div\");\n    positionContainer.className = \"maplibregl-ctrl-\".concat(positionName);\n\n    map._controlContainer.appendChild(positionContainer);\n\n    map._controlPositions[positionName] = positionContainer;\n  }\n  /************************************************************\n   * Create Geofence Controls\n   *************************************************************/\n\n\n  function createGeofenceCreateContainer(isCircle) {\n    var container = createElement(\"div\", \"geofence-ctrl-create-prompt-container\", geofenceControlContainer);\n    _createContainer = createElement(\"div\", \"geofence-ctrl-create-prompt\", container);\n\n    if (isCircle) {\n      /* Create buttons to switch between different modes */\n      var buttonContainer = createElement(\"div\", \"geofence-ctrl-create-prompt-buttons\", _createContainer);\n      var circleModeButton = createElement(\"div\", \"geofence-ctrl-create-prompt-button-circle geofence-ctrl-create-prompt-button\", buttonContainer);\n      circleModeButton.addEventListener(\"click\", function () {\n        // Change button selected style\n        circleModeButton.classList.add(\"geofence-ctrl-create-prompt-selected\");\n        polygonModeButton.classList.remove(\"geofence-ctrl-create-prompt-selected\"); // Switch info box mode\n\n        if (_polygonModeContainer) {\n          removeElement(_polygonModeContainer);\n          _polygonModeContainer = undefined;\n        }\n\n        if (!_circleModeContainer) createCircleModeCreateContainer(_createContainer);\n        geofenceControl.changeMode(\"draw_circle\");\n      });\n      circleModeButton.innerHTML = \"Circle\";\n      var polygonModeButton = createElement(\"div\", \"geofence-ctrl-create-prompt-button-polygon geofence-ctrl-create-prompt-button\", buttonContainer);\n      polygonModeButton.addEventListener(\"click\", function () {\n        geofenceControl.changeMode(\"draw_polygon\"); // Change button selected style\n\n        polygonModeButton.classList.add(\"geofence-ctrl-create-prompt-selected\");\n        circleModeButton.classList.remove(\"geofence-ctrl-create-prompt-selected\"); // Switch info box mode\n\n        if (_circleModeContainer) {\n          removeElement(_circleModeContainer);\n          _circleModeContainer = undefined;\n        }\n\n        if (!_polygonModeContainer) createPolygonModeCreateContainer(_createContainer);\n      });\n      polygonModeButton.innerHTML = \"Custom\";\n      circleModeButton.classList.add(\"geofence-ctrl-create-prompt-selected\");\n      createCircleModeCreateContainer(_createContainer);\n    } else {\n      createPolygonModeCreateContainer(_createContainer);\n    }\n  }\n\n  function createCircleModeCreateContainer(container) {\n    _circleModeContainer = createElement(\"div\", \"geofence-ctrl-create-circle-mode-container\", container);\n    var radiusTitle = createElement(\"div\", \"geofence-ctrl-create-circle-mode-title\", _circleModeContainer);\n    radiusTitle.innerHTML = \"Radius\";\n    _geofenceCreateRadiusInput = createElement(\"input\", \"geofence-ctrl-create-circle-mode-input\", _circleModeContainer);\n\n    _geofenceCreateRadiusInput.addEventListener(\"keydown\", debounce(geofenceControl.updateInputRadius, 200));\n  }\n\n  function createPolygonModeCreateContainer(container) {\n    _polygonModeContainer = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-container\", container);\n    var moreInfoContainer = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-info-container\", _polygonModeContainer);\n    var moreInfoIcon = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-icon\", moreInfoContainer);\n    var letterI = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-info-icon\", moreInfoIcon);\n    letterI.innerHTML = \"i\";\n    var moreInfo = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-title\", moreInfoContainer);\n    moreInfo.innerHTML = \"How it works?\";\n    var resetButton = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-reset-button geofence-ctrl-button\", _polygonModeContainer);\n    resetButton.innerHTML = \"Reset\";\n    resetButton.addEventListener(\"click\", function () {\n      geofenceControl.resetGeofence();\n    }); // Add popup onClick\n\n    var popup = createPolygonModeInfoPopup(moreInfoIcon);\n    moreInfoContainer.addEventListener(\"click\", function () {\n      popup.classList.toggle(\"show\");\n    });\n  }\n\n  function createPolygonModeInfoPopup(container) {\n    var popupContainer = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-container\", container);\n    var popup = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup\", popupContainer);\n    createPopupStep(popup, \"Move dots to desired position\", createPopupStep1Icon());\n    createPopupStep(popup, \"Click on a border to create a dot\", createPopupStep2Icon());\n    createPopupStep(popup, \"Click into shape to move\", createPopupStep3Icon());\n    createPopupStep(popup, \"Press delete to remove a dot\", createPopupStep4Icon());\n    return popup;\n  }\n\n  function createPopupStep(container, text, image) {\n    var popupStep = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-step\", container);\n    var popupStepImage = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-step-image\", popupStep);\n    popupStepImage.appendChild(image);\n    var popupStepText = createElement(\"div\", \"geofence-ctrl-create-polygon-mode-popup-step-text\", popupStep);\n    popupStepText.innerHTML = text;\n  }\n\n  function removeGeofenceCreateContainer() {\n    removeElement(_createContainer);\n    _createContainer = undefined;\n    _circleModeContainer = undefined;\n    _polygonModeContainer = undefined;\n  }\n  /************************************************************\n   * Geofence List\n   *************************************************************/\n\n\n  function createGeofenceListContainer() {\n    var geofenceListContainer = createElement(\"div\", \"geofence-ctrl-list-container\", geofenceControlContainer);\n    createGeofenceListHeader(geofenceListContainer);\n    _geofenceList = createElement(\"div\", \"geofence-ctrl-list\", geofenceListContainer);\n\n    _geofenceList.addEventListener(\"scroll\", function () {\n      var _geofenceList2 = _geofenceList,\n          scrollHeight = _geofenceList2.scrollHeight,\n          scrollTop = _geofenceList2.scrollTop,\n          clientHeight = _geofenceList2.clientHeight;\n\n      if (scrollTop + clientHeight >= scrollHeight - 20) {\n        geofenceControl.loadMoreGeofences();\n      }\n    });\n  }\n\n  function createGeofenceListHeader(geofenceListContainer) {\n    var header = createElement(\"div\", \"geofence-ctrl-list-header\", geofenceListContainer);\n    _geofenceTitle = createElement(\"div\", \"geofence-ctrl-list-header-title\", header);\n    _geofenceTitle.innerHTML = \"Geofences (0)\";\n    _checkBoxAllAndCreateContainer = createElement(\"div\", \"geofence-ctrl-list-header-checkbox-create-container\", header);\n    createCheckboxAllContainer(_checkBoxAllAndCreateContainer);\n  }\n\n  function createCheckboxAllContainer(geofenceListContainer) {\n    _checkBoxAllContainer = createElement(\"div\", \"geofence-ctrl-list-checkbox-all-container\", geofenceListContainer);\n    _checkboxAll = createElement(\"input\", \"geofence-ctrl-list-checkbox-all\", _checkBoxAllContainer);\n    _checkboxAll.type = \"checkbox\";\n\n    _checkboxAll.addEventListener(\"click\", function () {\n      if (_checkboxAll.checked) {\n        geofenceControl.displayAllGeofences();\n        checkboxAllText.innerHTML = \"Deselect All\";\n      } else {\n        geofenceControl.hideAllGeofences();\n        checkboxAllText.innerHTML = \"Select All\";\n      }\n    });\n\n    var checkboxAllText = createElement(\"div\", \"geofence-ctrl-list-checkbox-all-title\", _checkBoxAllContainer);\n    checkboxAllText.innerHTML = \"Select all\";\n    _addGeofencebutton = createElement(\"div\", \"geofence-ctrl-list-header-add-button\", _checkBoxAllContainer);\n    _addGeofencebutton.innerHTML = \"+ Add\";\n\n    _addGeofencebutton.addEventListener(\"click\", function () {\n      createAddGeofenceContainer();\n    });\n  }\n\n  function renderListItem(geofence) {\n    var container = createElement(\"li\", \"geofence-ctrl-list-item-container\", _geofenceList);\n    container.id = \"list-item-\".concat(geofence.geofenceId);\n    var listItem = createElement(\"li\", \"geofence-ctrl-list-item\", container);\n    var leftContainer = createElement(\"div\", \"geofence-ctrl-list-item-left-container\", listItem);\n    var checkbox = createElement(\"input\", \"geofence-ctrl-list-item-checkbox\", leftContainer);\n    checkbox.id = \"list-item-checkbox-\".concat(geofence.geofenceId);\n    checkbox.type = \"checkbox\";\n    checkbox.addEventListener(\"click\", function () {\n      if (checkbox.checked) {\n        geofenceControl.displayGeofence(geofence.geofenceId);\n        geofenceControl.fitGeofence(geofence.geofenceId);\n      } else {\n        geofenceControl.hideGeofence(geofence.geofenceId);\n      }\n    });\n    var rightContainer = createElement(\"div\", \"geofence-ctrl-list-item-right-container\", listItem);\n    var geofenceTitleContainer = createElement(\"div\", \"geofence-ctrl-list-item-title-container\", rightContainer);\n    geofenceTitleContainer.addEventListener(\"mouseover\", function () {\n      geofenceControl.displayHighlightedGeofence(geofence.geofenceId);\n    });\n    geofenceTitleContainer.addEventListener(\"mouseout\", function () {\n      geofenceControl.hideHighlightedGeofence();\n    });\n    var geofenceTitle = createElement(\"div\", \"geofence-ctrl-list-item-title\", geofenceTitleContainer);\n    geofenceTitle.innerHTML = geofence.geofenceId;\n    var editButton = createElement(\"div\", \"geofence-ctrl-edit-button\", geofenceTitleContainer);\n    editButton.addEventListener(\"click\", function () {\n      geofenceControl.editGeofence(geofence.geofenceId);\n      createEditControls(listItem, rightContainer, leftContainer, geofence.geofenceId);\n      listItem.classList.remove(\"geofence-ctrl-list-item\");\n      listItem.classList.add(\"geofence-ctrl-list-selected-item\");\n    });\n    editButton.appendChild(createEditIcon());\n  }\n\n  function createEditControls(item, rightContainer, leftContainer, id) {\n    var _this = this;\n\n    var editContainer = createElement(\"div\", \"geofence-ctrl-list-item-controls\", rightContainer);\n    var deleteButton = renderDeleteButton(leftContainer, id);\n\n    var removeEditContainer = function removeEditContainer() {\n      item.classList.remove(\"geofence-ctrl-list-selected-item\");\n      item.classList.add(\"geofence-ctrl-list-item\");\n      removeElement(editContainer);\n      removeElement(deleteButton);\n    };\n\n    var cancelButton = createElement(\"div\", \"geofence-ctrl-cancel-button\", editContainer);\n    cancelButton.classList.add(\"geofence-ctrl-button\");\n    cancelButton.innerHTML = \"Cancel\";\n    cancelButton.addEventListener(\"click\", function () {\n      geofenceControl.setEditingModeEnabled(false);\n      removeEditContainer();\n    });\n    var saveGeofenceButton = createElement(\"div\", \"geofence-ctrl-save-button geofence-ctrl-button\", editContainer);\n    saveGeofenceButton.addEventListener(\"click\", function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return geofenceControl.saveGeofence();\n\n              case 2:\n                removeEditContainer();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    });\n    saveGeofenceButton.title = \"Save\";\n    saveGeofenceButton.innerHTML = \"Save\";\n  }\n  /************************************************************\n   * Add Geofence Controls\n   *************************************************************/\n\n\n  function removeAddGeofenceContainer() {\n    removeElement(_addGeofenceContainer);\n    clearAddGeofenceError();\n    showCheckboxAllContainer();\n  }\n\n  function clearAddGeofenceError() {\n    if (_errorDiv) {\n      removeElement(_errorDiv);\n      _errorDiv = undefined;\n    }\n  }\n\n  function createAddGeofenceContainer() {\n    hideCheckboxAllContainer();\n    _addGeofenceContainer = createElement(\"div\", \"geofence-ctrl-add-geofence-container\", _checkBoxAllAndCreateContainer);\n    var addGeofencePrompt = createElement(\"div\", \"geofence-ctrl-add-geofence\", _addGeofenceContainer);\n    var nameInput = createElement(\"input\", \"geofence-ctrl-add-geofence-input\", addGeofencePrompt);\n    nameInput.placeholder = \"Enter name\";\n    var buttonContainer = createElement(\"div\", \"geofence-ctrl-add-geofence-buttons\", addGeofencePrompt);\n    var cancelButton = createElement(\"div\", \"geofence-ctrl-add-geofence-cancel-button geofence-ctrl-button \", buttonContainer);\n    cancelButton.innerHTML = \"Cancel\";\n    cancelButton.addEventListener(\"click\", function () {\n      removeAddGeofenceContainer();\n      geofenceControl.setEditingModeEnabled(false);\n    });\n    var saveButton = createElement(\"div\", \"geofence-ctrl-button geofence-ctrl-save-button\", buttonContainer);\n    saveButton.innerHTML = \"Save\";\n    saveButton.addEventListener(\"click\", function () {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var output;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                clearAddGeofenceError();\n                _context2.next = 3;\n                return geofenceControl.createGeofence(escape(nameInput.value));\n\n              case 3:\n                output = _context2.sent;\n                if (output) removeAddGeofenceContainer();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    });\n    geofenceControl.addEditableGeofence();\n  }\n\n  function createAddGeofencePromptError(error) {\n    if (_errorDiv) {\n      return;\n    }\n\n    _errorDiv = createElement(\"div\", \"geofence-ctrl-add-geofence-error\", _addGeofenceContainer);\n    var errorIconContainer = createElement(\"div\", \"geofence-ctrl-add-geofence-error-icon\", _errorDiv);\n    errorIconContainer.appendChild(createErrorIcon());\n    var errorText = createElement(\"div\", \"geofence-ctrl-add-geofence-error-text\", _errorDiv);\n    errorText.innerHTML = error;\n  }\n  /************************************************************\n   * Delete Controls\n   *************************************************************/\n\n\n  function renderDeleteButton(container, id) {\n    var deleteButton = createElement(\"div\", \"geofence-ctrl-delete-button\", container);\n    deleteButton.classList.add(\"geofence-ctrl-button\");\n    deleteButton.addEventListener(\"click\", function () {\n      createConfirmDeleteContainer(id);\n    });\n    deleteButton.appendChild(createTrashIcon());\n    return deleteButton;\n  }\n\n  function createConfirmDeleteContainer(geofenceId) {\n    _deleteGeofenceContainer = createElement(\"div\", \"geofence-ctrl-delete-prompt-container\", geofenceControlContainer);\n    var deleteGeofencePrompt = createElement(\"div\", \"geofence-ctrl-delete-prompt\", _deleteGeofenceContainer);\n    var title = createElement(\"div\", \"geofence-ctrl-delete-geofence-title\", deleteGeofencePrompt);\n    title.innerHTML = \"Are you sure you want to delete <strong>\".concat(geofenceId, \"</strong>?\");\n    createDeleteButtonsContainer(deleteGeofencePrompt, geofenceId);\n  }\n\n  function createDeleteButtonsContainer(container, geofenceId) {\n    var deleteButtonsContainer = createElement(\"div\", \"geofence-ctrl-delete-geofence-buttons\", container);\n    var cancelButton = createElement(\"div\", \"geofence-ctrl-delete-geofence-cancel-button\", deleteButtonsContainer);\n    cancelButton.innerHTML = \"Cancel\";\n    cancelButton.addEventListener(\"click\", function () {\n      removeElement(_deleteGeofenceContainer);\n    });\n    var confirmDeleteButton = createElement(\"div\", \"geofence-ctrl-delete-geofence-confirm-button\", deleteButtonsContainer);\n    confirmDeleteButton.innerHTML = \"Delete\";\n    confirmDeleteButton.addEventListener(\"click\", function () {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var id;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return geofenceControl.deleteGeofence(geofenceId);\n\n              case 2:\n                id = _context3.sent;\n\n                if (id) {\n                  createDeleteResultContainer(true);\n                  removeElement(_deleteGeofenceContainer);\n                  geofenceControl.setEditingModeEnabled(false);\n                }\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    });\n  }\n\n  function createDeleteResultContainer(success) {\n    _deletePopdownContainer = createElement(\"div\", \"geofence-ctrl-delete-popdown-container\", geofenceControlContainer);\n    var deletePopdown = createElement(\"div\", \"geofence-ctrl-delete-popdown\", _deletePopdownContainer);\n    var deletePopdownCloseButton = createElement(\"div\", \"geofence-ctrl-delete-popdown-close-button\", _deletePopdownContainer);\n    deletePopdownCloseButton.appendChild(createCloseIcon());\n    deletePopdownCloseButton.addEventListener(\"click\", function () {\n      removeElement(_deletePopdownContainer);\n    });\n    var deleteSuccessIcon = createElement(\"div\", \"geofence-ctrl-delete-popdown-icon\", deletePopdown);\n    deleteSuccessIcon.appendChild(createDeleteSuccessIcon());\n    var deletePopdownText = createElement(\"div\", \"geofence-ctrl-delete-popdown-text\", deletePopdown);\n    deletePopdownText.innerHTML = success ? \"Geofence was deleted successfully\" : \"Geofence failed to delete\";\n  }\n  /************************************************************\n   * Utility Methods\n   *************************************************************/\n\n\n  function updateCheckbox(geofenceId, checked) {\n    var checkbox = document.getElementById(\"list-item-checkbox-\".concat(geofenceId));\n    if (checkbox) checkbox.checked = checked;\n  }\n\n  function removeGeofenceListItem(geofenceId) {\n    var listItem = document.getElementById(\"list-item-\".concat(geofenceId));\n    removeElement(listItem);\n  }\n\n  function setGeofenceListEnabled(enabled) {\n    _checkboxAll.disabled = !enabled;\n    enabled ? _addGeofencebutton.classList.remove(\"geofence-ctrl-noHover\") : _addGeofencebutton.classList.add(\"geofence-ctrl-noHover\");\n    var inputs = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n\n    for (var i = 0; i < inputs.length; i++) {\n      inputs.item(i).disabled = !enabled;\n    }\n\n    var items = document.getElementsByClassName(\"geofence-ctrl-list-item-container\");\n\n    for (var _i = 0; _i < items.length; _i++) {\n      enabled ? items.item(_i).classList.remove(\"geofence-ctrl-noHover\") : items.item(_i).classList.add(\"geofence-ctrl-noHover\");\n    }\n  }\n\n  function getCheckboxAllValue() {\n    return _checkboxAll.checked;\n  }\n\n  function updateGeofenceCount(count) {\n    _geofenceTitle.innerHTML = \"Geofences (\".concat(count, \")\");\n  }\n\n  function updateGeofenceRadius(radius) {\n    if (_geofenceCreateRadiusInput) _geofenceCreateRadiusInput.value = \"\".concat(radius);\n  }\n\n  function hideCheckboxAllContainer() {\n    _checkBoxAllContainer.style.display = \"none\";\n  }\n\n  function showCheckboxAllContainer() {\n    _checkBoxAllContainer.style.display = \"flex\";\n  }\n\n  return {\n    registerControlPosition: registerControlPosition,\n    createElement: createElement,\n    removeElement: removeElement,\n    createGeofenceCreateContainer: createGeofenceCreateContainer,\n    createGeofenceListContainer: createGeofenceListContainer,\n    removeAddGeofenceContainer: removeAddGeofenceContainer,\n    createAddGeofencePromptError: createAddGeofencePromptError,\n    renderListItem: renderListItem,\n    updateCheckbox: updateCheckbox,\n    removeGeofenceListItem: removeGeofenceListItem,\n    setGeofenceListEnabled: setGeofenceListEnabled,\n    getCheckboxAllValue: getCheckboxAllValue,\n    removeGeofenceCreateContainer: removeGeofenceCreateContainer,\n    updateGeofenceCount: updateGeofenceCount,\n    updateGeofenceRadius: updateGeofenceRadius\n  };\n}","map":null,"metadata":{},"sourceType":"module"}