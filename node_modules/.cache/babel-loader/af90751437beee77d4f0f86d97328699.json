{"ast":null,"code":"import { COLOR_BLACK } from \"./constants\";\nimport { getGeofenceFeatureArray } from \"./geofenceUtils\";\nimport { isGeofenceArray, isPolygonArray } from \"./utils\";\nvar FILL_OPACITY = 0.3;\nvar BORDER_OPACITY = 0.5;\nvar BORDER_WIDTH = 4;\n/**\n * DrawPoints utility function for adding points to a map based on coordinate data or a FeatureCollection. Will add clustered points and styled markers by default with options for popups and other styles\n */\n\nexport function drawGeofences(sourceName, data, map) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n\n  if (!map || typeof map.addSource !== \"function\" || typeof map.addLayer !== \"function\") {\n    throw new Error(\"Please use a maplibre map\");\n  }\n\n  if (data.length > 0 && !isGeofenceArray(data) && !isPolygonArray(data)) {\n    throw new Error(\"Please pass in an array of Geofences or an array of Polygons\");\n  }\n  /*\n   * Data source for features\n   * Convert data passed in as coordinates into feature data\n   */\n\n\n  var sourceId = \"\".concat(sourceName);\n  map.addSource(sourceId, {\n    type: \"geojson\",\n    data: getGeofenceFeatureArray(data),\n    generateId: true\n  });\n  var initialVisiblity = ((_a = options.visible) !== null && _a !== void 0 ? _a : true) ? \"visible\" : \"none\";\n  /*\n   * Draw ui layers for source data\n   */\n\n  var fillLayerId = \"\".concat(sourceName, \"-fill-layer\");\n  map.addLayer({\n    id: fillLayerId,\n    type: \"fill\",\n    source: sourceId,\n    layout: {\n      visibility: initialVisiblity\n    },\n    paint: {\n      \"fill-color\": (_b = options.fillColor) !== null && _b !== void 0 ? _b : COLOR_BLACK,\n      \"fill-opacity\": (_c = options.fillOpacity) !== null && _c !== void 0 ? _c : FILL_OPACITY\n    }\n  }); // Add a black outline around the polygon.\n\n  var outlineLayerId = \"\".concat(sourceName, \"-outline-layer\");\n  map.addLayer({\n    id: outlineLayerId,\n    type: \"line\",\n    source: sourceId,\n    layout: {\n      visibility: initialVisiblity\n    },\n    paint: {\n      \"line-color\": (_d = options.borderColor) !== null && _d !== void 0 ? _d : COLOR_BLACK,\n      \"line-opacity\": (_e = options.borderOpacity) !== null && _e !== void 0 ? _e : BORDER_OPACITY,\n      \"line-width\": (_f = options.borderWidth) !== null && _f !== void 0 ? _f : BORDER_WIDTH,\n      \"line-offset\": (_g = options.borderOffset) !== null && _g !== void 0 ? _g : ((_h = options.borderWidth) !== null && _h !== void 0 ? _h : BORDER_WIDTH) / 2 * -1\n    }\n  }); // utility function for setting layer visibility to none\n\n  var hide = function hide() {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"none\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"none\");\n  }; // utility function for setting layer visibility to visible\n\n\n  var show = function show() {\n    map.setLayoutProperty(fillLayerId, \"visibility\", \"visible\");\n    map.setLayoutProperty(outlineLayerId, \"visibility\", \"visible\");\n  }; // utility function for checking layer visibility\n\n\n  var isVisible = function isVisible() {\n    var visibility = map.getLayoutProperty(fillLayerId, \"visibility\");\n    return visibility === \"visible\";\n  }; // utility function for setting layer visibility to visible\n\n\n  var setData = function setData(data) {\n    map.getSource(sourceId).setData(data);\n  };\n\n  return {\n    sourceId: sourceId,\n    outlineLayerId: outlineLayerId,\n    fillLayerId: fillLayerId,\n    show: show,\n    hide: hide,\n    isVisible: isVisible,\n    setData: setData\n  };\n}","map":null,"metadata":{},"sourceType":"module"}