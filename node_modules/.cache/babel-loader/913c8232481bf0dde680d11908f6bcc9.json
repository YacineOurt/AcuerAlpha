{"ast":null,"code":"var _toConsumableArray = require(\"/home/yacine/Pro/alpha/AcuerApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\n/*\n * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar ChangeCase = require('change-case');\n\nvar reduce = function reduce(obj, f, accumulator_init) {\n  return Object.keys(obj || {}).reduce(function (accumulator, key) {\n    var value = obj[key];\n    return f(accumulator, value, key, obj);\n  }, accumulator_init);\n};\n\nvar forEach = function forEach(obj, f) {\n  Object.keys(obj || {}).forEach(function (key) {\n    var value = obj[key];\n    f(value, key);\n  });\n}; // Note: This is a crappy version to a certain extent... don't use with Strings, for example...\n\n\nvar clone = function clone(object) {\n  return Object.assign(new object.constructor(), object);\n};\n\nvar cloneDeep = function cloneDeep(obj) {\n  if (obj === null || obj === undefined || typeof obj !== 'object') {\n    return obj;\n  }\n\n  if (obj instanceof Array) {\n    return obj.reduce(function (arr, item, i) {\n      arr[i] = cloneDeep(item);\n      return arr;\n    }, []);\n  }\n\n  if (obj instanceof Object) {\n    return Object.keys(obj || {}).reduce(function (cpObj, key) {\n      cpObj[key] = cloneDeep(obj[key]);\n      return cpObj;\n    }, {});\n  }\n};\n\nvar isObject = function isObject(value) {\n  var type = typeof value;\n  return value != null && (type === 'object' || type === 'function');\n};\n\nvar isString = function isString(obj) {\n  return typeof obj === 'string' || obj instanceof String;\n};\n\nvar isArray = function isArray(obj) {\n  return Array.isArray(obj);\n};\n\nvar isEmpty = function isEmpty(obj) {\n  return [Object, Array].includes((obj || {}).constructor) && !Object.entries(obj || {}).length;\n};\n\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null || Object.prototype.toString.call(value) !== '[object Object]') {\n    return false;\n  }\n\n  if (Object.getPrototypeOf(value) === null) {\n    return true;\n  }\n\n  var proto = value;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(value) === proto;\n}\n\nvar filter = function filter(arr, _filter) {\n  if (typeof _filter !== 'function') {\n    throw \"filter is not a function\";\n  }\n\n  if (typeof arr === 'undefined') {\n    return [];\n  }\n\n  return arr.filter(_filter);\n};\n\nvar assign = function assign() {\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift({});\n  return Object.assign.apply(Object, _toConsumableArray(args));\n};\n/* global Set */\n\n\nvar pull = function pull(arr) {\n  for (var _len = arguments.length, removeList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    removeList[_key - 1] = arguments[_key];\n  }\n\n  var removeSet = new Set(removeList);\n\n  for (var i = arr.length - 1; i >= 0; i--) {\n    if (removeSet.has(arr[i])) {\n      arr.splice(i, 1);\n    }\n  }\n};\n\nvar unique = function unique(arr) {\n  return _toConsumableArray(new Set(arr));\n};\n\nvar upperFirst = function upperFirst(str) {\n  return str ? str[0].toUpperCase() + str.substr(1) : '';\n};\n\nvar matchFn = function matchFn(inputObj, testObj) {\n  if (isObject(testObj)) {\n    return Object.keys(testObj).every(function (key) {\n      return matchFn(inputObj[key], testObj[key]);\n    });\n  } else {\n    return inputObj == testObj;\n  }\n};\n\nvar matches = function matches(matchObj) {\n  var cloneObj = cloneDeep(matchObj);\n\n  var matchesFn = function matchesFn(inputObj) {\n    return matchFn(inputObj, cloneObj);\n  };\n\n  return matchesFn;\n};\n\nvar DEFAULT_OPTIONS = {\n  transform: ChangeCase.camelCaseTransformMerge\n};\n\nvar changeDefaultCaseTransform = function changeDefaultCaseTransform(caseFunction, default_options) {\n  return function (caseToChange, options) {\n    return caseFunction(caseToChange, Object.assign({}, DEFAULT_OPTIONS, default_options, options));\n  };\n};\n\nmodule.exports = {\n  each: forEach,\n  forEach: forEach,\n  forIn: forEach,\n  keys: Object.keys,\n  clone: clone,\n  cloneDeep: cloneDeep,\n  extend: Object.assign,\n  isString: isString,\n  isArray: isArray,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isEmpty: isEmpty,\n  filter: filter,\n  reduce: reduce,\n  assign: assign,\n  upperFirst: upperFirst,\n  camelCase: changeDefaultCaseTransform(ChangeCase.camelCase),\n  snakeCase: ChangeCase.snakeCase,\n  kebabCase: ChangeCase.paramCase,\n  pull: pull,\n  matches: matches,\n  unique: unique\n};","map":null,"metadata":{},"sourceType":"script"}