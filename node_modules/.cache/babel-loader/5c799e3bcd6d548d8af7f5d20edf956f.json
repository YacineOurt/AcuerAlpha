{"ast":null,"code":"import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, _ref, mapStyle) {\n  var _ref$fillColor = _ref.fillColor,\n      markerColor = _ref$fillColor === void 0 ? MARKER_COLOR : _ref$fillColor,\n      _ref$smCircleSize = _ref.smCircleSize,\n      smallSize = _ref$smCircleSize === void 0 ? 60 : _ref$smCircleSize,\n      _ref$smThreshold = _ref.smThreshold,\n      smallThreshold = _ref$smThreshold === void 0 ? 50 : _ref$smThreshold,\n      _ref$mdCircleSize = _ref.mdCircleSize,\n      mediumSize = _ref$mdCircleSize === void 0 ? 100 : _ref$mdCircleSize,\n      _ref$mdThreshold = _ref.mdThreshold,\n      mediumThreshold = _ref$mdThreshold === void 0 ? 100 : _ref$mdThreshold,\n      _ref$lgCircleSize = _ref.lgCircleSize,\n      largeSize = _ref$lgCircleSize === void 0 ? 140 : _ref$lgCircleSize,\n      _ref$lgThreshold = _ref.lgThreshold,\n      largeThreshold = _ref$lgThreshold === void 0 ? 500 : _ref$lgThreshold,\n      _ref$xlCircleSize = _ref.xlCircleSize,\n      extraLargeSize = _ref$xlCircleSize === void 0 ? 180 : _ref$xlCircleSize,\n      _ref$borderWidth = _ref.borderWidth,\n      borderWidth = _ref$borderWidth === void 0 ? 4 : _ref$borderWidth,\n      _ref$borderColor = _ref.borderColor,\n      borderColor = _ref$borderColor === void 0 ? COLOR_WHITE : _ref$borderColor,\n      clusterPaint = _ref.clusterPaint,\n      onClick = _ref.onClick,\n      showCount = _ref.showCount,\n      clusterCountLayout = _ref.clusterCountLayout,\n      _ref$fontColor = _ref.fontColor,\n      fontColor = _ref$fontColor === void 0 ? COLOR_WHITE : _ref$fontColor;\n  var clusterLayerId = \"\".concat(sourceName, \"-layer-clusters\");\n  var clusterSymbolLayerId = \"\".concat(sourceName, \"-layer-cluster-count\"); // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n\n  var paintOptions = Object.assign({\n    \"circle-color\": [\"step\", [\"get\", \"point_count\"], markerColor, smallThreshold, markerColor, mediumThreshold, markerColor, largeThreshold, markerColor],\n    \"circle-radius\": [\"step\", [\"get\", \"point_count\"], smallSize, smallThreshold, mediumSize, mediumThreshold, largeSize, largeThreshold, extraLargeSize],\n    \"circle-stroke-width\": borderWidth,\n    \"circle-stroke-color\": borderColor\n  }, clusterPaint);\n  var defaultClusterLayer = {\n    id: clusterLayerId,\n    type: \"circle\",\n    source: sourceName,\n    filter: [\"has\", \"point_count\"],\n    paint: paintOptions\n  };\n  map.addLayer(Object.assign({}, defaultClusterLayer));\n  /*\n   * Inspect cluster on click\n   */\n\n  map.on(\"click\", clusterLayerId, function (e) {\n    if (typeof onClick === \"function\") onClick(e);\n    var features = map.queryRenderedFeatures(e.point, {\n      layers: [clusterLayerId]\n    });\n    var clusterId = features[0].properties.cluster_id;\n    var source = map.getSource(sourceName);\n\n    if (isGeoJsonSource(source)) {\n      source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n        if (err) return;\n        map.easeTo({\n          center: features[0].geometry.coordinates,\n          zoom: zoom\n        });\n      });\n    }\n  });\n  /*\n   * Symbol Layer for cluster point count\n   */\n\n  if (showCount) {\n    var defaultLayoutOptions = {\n      \"text-field\": \"{point_count_abbreviated}\",\n      \"text-size\": 24\n    };\n    var locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n\n    if (locationServiceStyle) {\n      defaultLayoutOptions[\"text-font\"] = [FONT_DEFAULT_BY_STYLE[locationServiceStyle]];\n    }\n\n    var layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n    var _paintOptions = {\n      \"text-color\": fontColor\n    };\n    var defaultClusterCount = {\n      id: clusterSymbolLayerId,\n      type: \"symbol\",\n      source: sourceName,\n      filter: [\"has\", \"point_count\"],\n      layout: layoutOptions,\n      paint: _paintOptions\n    };\n    map.addLayer(Object.assign({}, defaultClusterCount));\n  }\n\n  return {\n    clusterLayerId: clusterLayerId,\n    clusterSymbolLayerId: clusterSymbolLayerId\n  };\n}","map":null,"metadata":{},"sourceType":"module"}