{"ast":null,"code":"import _toConsumableArray from \"/home/yacine/Pro/alpha/AcuerApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/yacine/Pro/alpha/AcuerApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/yacine/Pro/alpha/AcuerApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nvar FIT_BOUNDS_PADDING = {\n  left: 240\n}; // Default to 240px right now because of the left nav\n\nexport var AmplifyGeofenceControl = /*#__PURE__*/function () {\n  function AmplifyGeofenceControl(options) {\n    _classCallCheck(this, AmplifyGeofenceControl);\n\n    this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n    this._loadedGeofences = {};\n    this._displayedGeofences = [];\n    this.changeMode = this.changeMode.bind(this);\n    this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n    this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n    this._loadGeofence = this._loadGeofence.bind(this);\n    this.updateInputRadius = this.updateInputRadius.bind(this);\n    this.saveGeofence = this.saveGeofence.bind(this);\n    this.editGeofence = this.editGeofence.bind(this);\n    this.deleteGeofence = this.deleteGeofence.bind(this);\n    this.displayAllGeofences = this.displayAllGeofences.bind(this);\n    this.hideAllGeofences = this.hideAllGeofences.bind(this);\n    this.addEditableGeofence = this.addEditableGeofence.bind(this);\n    this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n    this.displayHighlightedGeofence = this.displayHighlightedGeofence.bind(this);\n    this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n    this.displayGeofence = this.displayGeofence.bind(this);\n    this.hideGeofence = this.hideGeofence.bind(this);\n    this.fitGeofence = this.fitGeofence.bind(this);\n    this.fitAllGeofences = this.fitAllGeofences.bind(this);\n  }\n  /**********************************************************************\n   Public Methods for AmplifyGeofenceControl\n   **********************************************************************/\n\n\n  _createClass(AmplifyGeofenceControl, [{\n    key: \"getDefaultPosition\",\n    value: function getDefaultPosition() {\n      return \"full-screen\";\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      this._ui.removeElement(this._container);\n    } // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n\n  }, {\n    key: \"reorderMapLibreClassNames\",\n    value: function reorderMapLibreClassNames() {\n      var mapCanvas = document.getElementsByClassName(\"maplibregl-canvas\").item(0);\n\n      if (mapCanvas) {\n        mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n      }\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd(map) {\n      var _this = this;\n\n      this._map = map;\n      this.reorderMapLibreClassNames();\n      this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n      this._ui = AmplifyGeofenceControlUI(this, this._container);\n      this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n\n      this._ui.registerControlPosition(map, \"full-screen\");\n\n      this._ui.createGeofenceListContainer(); // Draw the geofences source to the map so we can update it on geofences load/creation\n\n\n      this._map.once(\"load\", function () {\n        // Prevents warnings on multiple re-renders, especially when rendered in react\n        if (this._map.getSource(\"displayedGeofences\")) {\n          return;\n        }\n\n        this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n          fillColor: GEOFENCE_COLOR,\n          borderColor: GEOFENCE_BORDER_COLOR,\n          borderOpacity: 1\n        });\n        this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n          fillColor: GEOFENCE_COLOR,\n          borderColor: GEOFENCE_BORDER_COLOR,\n          borderOpacity: 1,\n          borderWidth: 6\n        });\n        this.loadInitialGeofences();\n        map.addControl(new maplibregl.NavigationControl({\n          showCompass: false\n        }), \"bottom-right\");\n      }.bind(this));\n\n      this._map.on(\"draw.update\", function () {\n        var coordinates = _this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n\n        var radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n\n        _this._ui.updateGeofenceRadius(radius.toFixed(2));\n      });\n\n      return this._container;\n    }\n  }, {\n    key: \"createGeofence\",\n    value: function createGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!geofenceId || geofenceId.length === 0)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                if (isValidGeofenceId(geofenceId)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n\n                return _context.abrupt(\"return\");\n\n              case 6:\n                if (!isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                return _context.abrupt(\"return\", this.saveGeofence(geofenceId));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"saveGeofence\",\n    value: function saveGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var feature, idToSave, response, err, success, savedGeofence;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                feature = this._amplifyDraw.get(this._editingGeofenceId);\n                idToSave = geofenceId || this._editingGeofenceId;\n                _context2.next = 4;\n                return Geo.saveGeofences({\n                  geofenceId: idToSave,\n                  geometry: {\n                    polygon: feature.geometry[\"coordinates\"]\n                  }\n                });\n\n              case 4:\n                response = _context2.sent;\n\n                if (!response.errors[0]) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                err = response.errors[0];\n                throw new Error(\"There was an error saving geofence with id \".concat(idToSave, \": \").concat(err.error.code, \" - \").concat(err.error.message));\n\n              case 8:\n                success = response.successes[0];\n                savedGeofence = {\n                  geofenceId: success.geofenceId,\n                  geometry: {\n                    polygon: feature.geometry[\"coordinates\"]\n                  }\n                }; // render geofence to the map and add it to the list\n\n                this._loadGeofence(savedGeofence);\n\n                this.displayGeofence(savedGeofence.geofenceId);\n                this.setEditingModeEnabled(false);\n                return _context2.abrupt(\"return\", savedGeofence.geofenceId);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    } // Each page loads 100 geofences\n\n  }, {\n    key: \"loadInitialGeofences\",\n    value: function loadInitialGeofences() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$Geo$listGeofen, entries, nextToken, loadGeofence;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Geo.listGeofences();\n\n              case 3:\n                _yield$Geo$listGeofen = _context3.sent;\n                entries = _yield$Geo$listGeofen.entries;\n                nextToken = _yield$Geo$listGeofen.nextToken;\n                this._listGeofencesNextToken = nextToken;\n                loadGeofence = this._loadGeofence;\n                entries.forEach(function (geofence) {\n                  return loadGeofence(geofence);\n                });\n\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](0);\n                throw new Error(\"Error calling listGeofences: \".concat(_context3.t0));\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 12]]);\n      }));\n    }\n  }, {\n    key: \"loadMoreGeofences\",\n    value: function loadMoreGeofences() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$Geo$listGeofen2, entries, nextToken, loadGeofence;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._listGeofencesNextToken) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.prev = 1;\n                _context4.next = 4;\n                return Geo.listGeofences({\n                  nextToken: this._listGeofencesNextToken\n                });\n\n              case 4:\n                _yield$Geo$listGeofen2 = _context4.sent;\n                entries = _yield$Geo$listGeofen2.entries;\n                nextToken = _yield$Geo$listGeofen2.nextToken;\n                this._listGeofencesNextToken = nextToken;\n                loadGeofence = this._loadGeofence;\n                entries.forEach(function (geofence) {\n                  return loadGeofence(geofence);\n                });\n\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](1);\n                throw new Error(\"Error calling listGeofences: \".concat(_context4.t0));\n\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 13]]);\n      }));\n    }\n  }, {\n    key: \"editGeofence\",\n    value: function editGeofence(geofenceId) {\n      this.setEditingModeEnabled(true);\n      var geofence = this._loadedGeofences[geofenceId];\n\n      if (!geofence) {\n        throw new Error(\"Geofence with id \".concat(geofenceId, \" does not exist\"));\n      } // render in mapboxdraw\n\n\n      var feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n      var data = Object.assign({\n        id: geofence.geofenceId\n      }, feature);\n\n      this._amplifyDraw.add(data);\n\n      this._editingGeofenceId = geofence.geofenceId;\n    }\n  }, {\n    key: \"deleteGeofence\",\n    value: function deleteGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var response, err;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Geo.deleteGeofences(geofenceId);\n\n              case 2:\n                response = _context5.sent;\n\n                if (!response.errors[0]) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                err = response.errors[0].error;\n                throw new Error(\"There was an error deleting geofence with id \".concat(geofenceId, \": \").concat(err.code, \" - \").concat(err.message));\n\n              case 6:\n                this._ui.removeGeofenceListItem(geofenceId);\n\n                delete this._loadedGeofences[geofenceId];\n\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n\n                this._displayedGeofences = this._displayedGeofences.filter(function (geofence) {\n                  return geofence.geofenceId !== geofenceId;\n                });\n\n                this._updateDisplayedGeofences();\n\n                return _context5.abrupt(\"return\", geofenceId);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"deleteSelectedGeofences\",\n    value: function deleteSelectedGeofences() {\n      var _this2 = this;\n\n      var idsToDelete = this._displayedGeofences.map(function (fence) {\n        return fence.geofenceId;\n      }); // FIXME: delete geofence api call here\n\n\n      idsToDelete.forEach(function (id) {\n        _this2._ui.removeGeofenceListItem(id);\n\n        delete _this2._loadedGeofences[id];\n      });\n      this._displayedGeofences = [];\n\n      this._updateDisplayedGeofences();\n    }\n    /**********************************************************************\n     Private methods for CRUD Geofences\n     **********************************************************************/\n\n  }, {\n    key: \"_loadGeofence\",\n    value: function _loadGeofence(geofence) {\n      // If geofence exists remove it from displayed geofences\n      if (this._loadedGeofences[geofence.geofenceId]) {\n        this._displayedGeofences = this._displayedGeofences.filter(function (fence) {\n          return fence.geofenceId !== geofence.geofenceId;\n        });\n      } else {\n        // If geofence doesn't exist render a new list item for it\n        this._ui.renderListItem(geofence);\n      }\n\n      this._loadedGeofences[geofence.geofenceId] = geofence;\n\n      this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n    }\n  }, {\n    key: \"displayGeofence\",\n    value: function displayGeofence(geofenceId) {\n      this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n\n      this._updateDisplayedGeofences();\n\n      this._ui.updateCheckbox(geofenceId, true);\n\n      this.fitAllGeofences();\n    }\n  }, {\n    key: \"displayAllGeofences\",\n    value: function displayAllGeofences() {\n      var _this$_displayedGeofe,\n          _this3 = this;\n\n      (_this$_displayedGeofe = this._displayedGeofences).push.apply(_this$_displayedGeofe, _toConsumableArray(Object.values(this._loadedGeofences)));\n\n      this._updateDisplayedGeofences();\n\n      var checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n      Array.from(checkboxes).forEach(function (checkbox) {\n        return checkbox.checked = _this3._ui.getCheckboxAllValue();\n      });\n      this.fitAllGeofences();\n    }\n  }, {\n    key: \"fitGeofence\",\n    value: function fitGeofence(geofenceId) {\n      var mapBounds = this._map.getBounds();\n\n      var geofence = this._loadedGeofences[geofenceId];\n      geofence.geometry.polygon[0].forEach(function (coord) {\n        mapBounds.extend(coord);\n      });\n\n      this._map.fitBounds(mapBounds, {\n        padding: FIT_BOUNDS_PADDING\n      });\n    }\n  }, {\n    key: \"fitAllGeofences\",\n    value: function fitAllGeofences() {\n      var shouldFitBounds = false;\n\n      var mapBounds = this._map.getBounds();\n\n      this._displayedGeofences.forEach(function (geofence) {\n        geofence.geometry.polygon[0].forEach(function (coord) {\n          if (!mapBounds.contains(coord)) {\n            mapBounds.extend(coord);\n            shouldFitBounds = true;\n          }\n        });\n      });\n\n      if (shouldFitBounds) this._map.fitBounds(mapBounds, {\n        padding: FIT_BOUNDS_PADDING\n      });\n    }\n  }, {\n    key: \"hideGeofence\",\n    value: function hideGeofence(geofenceId) {\n      this._displayedGeofences = this._displayedGeofences.filter(function (geofence) {\n        return geofence.geofenceId !== geofenceId;\n      });\n\n      this._updateDisplayedGeofences();\n\n      this._ui.updateCheckbox(geofenceId, false);\n    }\n  }, {\n    key: \"hideAllGeofences\",\n    value: function hideAllGeofences() {\n      var _this4 = this;\n\n      this._displayedGeofences = [];\n\n      this._updateDisplayedGeofences();\n\n      var checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n      Array.from(checkboxes).forEach(function (checkbox) {\n        return checkbox.checked = _this4._ui.getCheckboxAllValue();\n      });\n    }\n  }, {\n    key: \"_updateDisplayedGeofences\",\n    value: function _updateDisplayedGeofences() {\n      var feature = getGeofenceFeatureArray(this._displayedGeofences);\n\n      this._drawGeofencesOutput.setData(feature);\n    }\n  }, {\n    key: \"displayHighlightedGeofence\",\n    value: function displayHighlightedGeofence(geofenceId) {\n      var geofence = this._loadedGeofences[geofenceId];\n\n      if (!geofence) {\n        console.warn(\"Geofence with id \".concat(geofenceId, \" does not exist\"));\n        return;\n      }\n\n      var feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n\n      this._highlightedGeofenceOutput.setData(feature);\n\n      this._highlightedGeofenceOutput.show();\n    }\n  }, {\n    key: \"hideHighlightedGeofence\",\n    value: function hideHighlightedGeofence() {\n      this._highlightedGeofenceOutput.hide();\n    }\n    /**********************************************************************\n     Methods for controlling amplify mapbox draw\n     **********************************************************************/\n\n  }, {\n    key: \"changeMode\",\n    value: function changeMode(mode) {\n      // erase existing mapbox draw content\n      this._amplifyDraw.delete(this._editingGeofenceId);\n\n      if (mode === \"draw_circle\") {\n        this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n      } else {\n        this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n      }\n    }\n  }, {\n    key: \"resetGeofence\",\n    value: function resetGeofence() {\n      // erase existing mapbox draw content\n      this._amplifyDraw.delete(this._editingGeofenceId);\n\n      if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n        this.editGeofence(this._editingGeofenceId);\n      } else {\n        this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n      }\n    } // Disables add button and selecting items from geofence list\n\n  }, {\n    key: \"setEditingModeEnabled\",\n    value: function setEditingModeEnabled(enabled) {\n      enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n      enabled ? this._drawGeofencesOutput.hide() : this._drawGeofencesOutput.show();\n\n      this._ui.setGeofenceListEnabled(!enabled);\n    }\n  }, {\n    key: \"updateInputRadius\",\n    value: function updateInputRadius(event) {\n      var radiusString = event.target.value;\n      var radius = parseInt(radiusString);\n\n      if (isNaN(radius)) {\n        return;\n      }\n\n      this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n    }\n  }, {\n    key: \"addEditableGeofence\",\n    value: function addEditableGeofence() {\n      this._editingGeofenceId = \"tempGeofence\";\n\n      this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n\n      this.setEditingModeEnabled(true);\n    }\n  }]);\n\n  return AmplifyGeofenceControl;\n}();","map":null,"metadata":{},"sourceType":"module"}